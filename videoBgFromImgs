#!/bin/sh


################################# Program Paths ################################
################################################################################
ECHO_PROG="/bin/echo"
SLEEP_PROG="/bin/sleep"
FEH_PROG="/usr/local/bin/feh"
BC_PROG="/usr/bin/bc"


################################### Constants ##################################
################################################################################
TRUE="1"
FALSE="0"
FRAME_FILE_NAME_PREFIX="videoBackgroundFrame_"
FRAME_FILE_NAME_POSTFIX=".jpg"
FRAME_RATE="24"
# Should be calculated from original video frame rate.
TARGET_INTER_FRAME_TIME="0.0416"
INTER_FRAME_TIME=$TARGET_INTER_FRAME_TIME
# We set INTER_FRAME_TIME to the division of TARGET_INTER_FRAME_TIME by this
# number when we drop a frame.
TARGET_INTER_FRAME_TIME_DIVISION="10"
# When INTER_FRAME_TIME is greater then this value we un-drop frames if we are
# dropping any.
UN_DROP_FRAME="0.0100"
ADJUST_PERF="192"
MAX_FRAME_SKIP="30"
FRAME_SKIP="0"


# Where $1 should be the time the last time this function was called and $2
# should be the current time.
# If play back is too slow we reduce the inter frame sleep time. If it goes
# below 0, then we set it back to TARGET_INTER_FRAME_TIME and increments
# FRAME_SKIP. If it's too high we essentially do the opposite, except we don't
# decrease FRAME_SKIP because it would only have been reduced if
# INTER_FRAME_TIME was already reduced below 0.
adjustPerf()
{
    INTER_FRAME_STEP_2="0.0300"
    INTER_FRAME_STEP_1="0.0020"
    INTER_FRAME_STEP_0="0.0009"
    DELTA_IDEAL="1"
    NEG_DELTA_FROM_IDEAL_STEP_1="0.5"
    NEG_DELTA_FROM_IDEAL_STEP_0="0.75"
    POS_DELTA_FROM_IDEAL_STEP_1="2"
    POS_DELTA_FROM_IDEAL_STEP_0="1.333333333"
    
    TIME_DELTA=`expr "$2" - "$1"`
    EXPECTED_TIME=`expr "$ADJUST_PERF" / "$FRAME_RATE"`

        echo "======================"

    $ECHO_PROG "Expected ${EXPECTED_TIME}, Found ${TIME_DELTA}, \
skip ${FRAME_SKIP}, inter frame ${INTER_FRAME_TIME}, adjust perf ${ADJUST_PERF}"


    if [ $EXPECTED_TIME -ne $((TIME_DELTA-1)) ] && \
	   [ $EXPECTED_TIME -ne $((TIME_DELTAT)) ] && \
	   [ $EXPECTED_TIME -ne $((TIME_DELTAT+1)) ]
    then
	# Calculate value to change INTER_FRAME_TIME by.
	DELTA_FROM_IDEAL=`${ECHO_PROG} "scale = 4; ${TIME_DELTA} / ${EXPECTED_TIME}" | $BC_PROG`
	if [ $EXPECTED_TIME -lt $TIME_DELTA ]
	then
	    # We're running too slow :'(
	    # Most likely case (hopefully).
	    # Set the amount to change the inter frame time by based on the
	    # delta from the ideal time.
	    if [ $TRUE -eq `$ECHO_PROG "${DELTA_FROM_IDEAL} < \
${POS_DELTA_FROM_IDEAL_STEP_0}" | $BC_PROG` ]
	    then
		INTER_FRAME_DELTA=$INTER_FRAME_STEP_0
	    else
		if [ $TRUE -eq `$ECHO_PROG "${DELTA_FROM_IDEAL} < \
${POS_DELTA_FROM_IDEAL_STEP_1}" | $BC_PROG` ]
		then
		    INTER_FRAME_DELTA=$INTER_FRAME_STEP_1
		else
		    INTER_FRAME_DELTA=$INTER_FRAME_STEP_2
		fi
	    fi
	    
	    INTER_FRAME_TIME=`$ECHO_PROG "scale = 4; ${INTER_FRAME_TIME} -\
$INTER_FRAME_DELTA" | $BC_PROG`

	    # If inter frame time has dropped below 0 we reset it to some
	    # fraction of target inter frame time and start dropping an extra frame.
	    if [ $TRUE -eq `$ECHO_PROG "${INTER_FRAME_TIME} < 0.0" | $BC_PROG` ]
	    then
		INTER_FRAME_TIME=`$ECHO_PROG "scale = 4; \
${TARGET_INTER_FRAME_TIME} / ${TARGET_INTER_FRAME_TIME_DIVISION}" | $BC_PROG`

		if [ $FRAME_SKIP -eq "0" ]
		then
		    FRAME_SKIP=$MAX_FRAME_SKIP
		else
		    if [ $FRAME_SKIP -ne "1" ]
		    then
			FRAME_SKIP=$((FRAME_SKIP-1))
		    fi
		fi
	    fi
	else
	    # We're running too fast :|
	    # Most likely case (hopefully).
	    if [ $TRUE -eq `$ECHO_PROG "${DELTA_FROM_IDEAL} < \
${NEG_DELTA_FROM_IDEAL_STEP_0}" | $BC_PROG` ]
	    then
		INTER_FRAME_DELTA=$INTER_FRAME_STEP_0
	    else
		if [ $TRUE -eq `$ECHO_PROG "${DELTA_FROM_IDEAL} < \
${NEG_DELTA_FROM_IDEAL_STEP_1}" | $BC_PROG` ]
		then
		    INTER_FRAME_DELTA=$INTER_FRAME_STEP_1
		else
		    INTER_FRAME_DELTA=$INTER_FRAME_STEP_2
		fi
	    fi
	    
	    INTER_FRAME_TIME=`$ECHO_PROG "scale = 4; ${INTER_FRAME_TIME} +0.010" | $BC_PROG`

	    # Un drop frames?
	    if [ $TRUE -eq `$ECHO_PROG "${INTER_FRAME_TIME} > ${UN_DROP_FRAME}"\
 | $BC_PROG` ] and [ $FRAME_SKIP -ne "0" ]
	    then
		$FRAME_SKIP=$(($FRAME_SKIP-1))
	    fi
	fi
    fi
}


main()
{
    FRAME_DESTINATION_DIR="/tmp/videoBackgroundFrames/"
    FRAME_INDEX="1"
    CURRENT_FRAME_PATH="${FRAME_DESTINATION_DIR}${FRAME_FILE_NAME_PREFIX}\
${FRAME_INDEX}${FRAME_FILE_NAME_POSTFIX}"
    OLD_FRAME_FPS_MEASURE_TIME="$(date +%s)"
    NEW_FRAME_FPS_MEASURE_TIME=$OLD_FRAME_FPS_MEASURE_TIME


    while [ -f $CURRENT_FRAME_PATH ]
    do
	if [ `expr $FRAME_INDEX % $ADJUST_PERF` -eq 0 ]
	then
	    OLD_FRAME_FPS_MEASURE_TIME=$NEW_FRAME_FPS_MEASURE_TIME
	    NEW_FRAME_FPS_MEASURE_TIME="$(date +%s)"
	    adjustPerf "$OLD_FRAME_FPS_MEASURE_TIME" \
		       "$NEW_FRAME_FPS_MEASURE_TIME"
	fi

	# echo "operator"
	if [ "$FRAME_SKIP" -eq "0" ]
	then
	    $FEH_PROG --bg-max $CURRENT_FRAME_PATH
	else
	    if [ `expr $FRAME_INDEX % $FRAME_SKIP` -ne "0" ]
	    then
		$FEH_PROG --bg-max $CURRENT_FRAME_PATH
	    fi
	fi
	
	CURRENT_FRAME_PATH="${FRAME_DESTINATION_DIR}${FRAME_FILE_NAME_PREFIX}\
${FRAME_INDEX}${FRAME_FILE_NAME_POSTFIX}"
	FRAME_INDEX=`expr $FRAME_INDEX + 1`

	$SLEEP_PROG $INTER_FRAME_TIME
    done
}


main
